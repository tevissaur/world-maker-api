""" 
Types

"""
union ArticleSubject = Character | City | Class | Country | God | Landmark | Monster | Race | Region | Religion | User | World

enum ArticleSubjectModel {
  CHARACTER
  USER
}

type Article {
  _id: ID
  title: String
  subjectModel: String
  subject: ArticleSubject
  body: String
  category: Category
}

type CalendarDay {
  name: String
  events: [String]
}
type CalendarWeek {
  numDaysPerWeek: Int
  days: [CalendarDay]
}
type CalendarMonth {
  name: String
  numDaysPerMonth: Int
}
type Calendar {
  _id: ID
  months: [CalendarMonth]
  numDaysPerYear: Int
  week: CalendarWeek
}
type Event {
  name: String
  date: String
}

type Category {
  _id: ID
  name: String
  parentCategory: Category
  subCategories: [Category]
}

type CharacterClasses {
  class: Class
  level: Int
  subClass: SubClass
}

type Character {
  _id: ID
  world: World
  creator: User
  name: String
  description: String
  alignment: String
  size: String
  race: Race
  classes: [CharacterClasses]
  backstory: String
  motives: Motives
  organizations: [Organization]
  residentCity: City
  isNPC: Boolean
}

type City {
  _id: ID
  name: String
  notableCharacters: [Character]
  country: Country
}

type Class {
  _id: ID
  name: String
  description: String
  features: [ClassFeatures]
  subClasses: SubClass
}
type SubClass {
  title: String
  features: [ClassFeatures]
}
type ClassFeatures {
  name: String
  requiredLevel: Int
}


type Country {
  _id: ID
  name: String
  description: String
  government: Government
  region: Region
}
type GovernmentMember {
  character: Character
  position: String
}
type Government {
  keyMembers: [GovernmentMember]
  style: String
}


type Religion {
  _id: ID!
  name: String
  description: String
}
type God {
  _id: ID!
  name: String!
  description: String!
  domains: [GodDomain]
  symbol: String!
  religions: [Religion]
  alignment: String
}
type GodDomain {
  name: String
  description: String
}



type History {
  title: String
  body: String
  date: String
}

type Item {
  name: String
} 

type Landmark {
  _id: ID
  name: String
  description: String
  regions: [Region]
}

type Monster {
  _id: ID!
  name: String!
  description: String
  size: String
  regions: [Region]
}

type Motives {
  bonds: [String]
  goals: [String]
  fears: [String]
}

type OrgRelationships {
  friends: [Organization]
  enemies: [Organization]
}

type Organization {
  name: String
  motives: Motives
  relationships: OrgRelationships
  activeRegions: [Region]
}

type Race {
  _id: ID
  name: String
  description: String
}
type Region {
  _id: ID!
  name: String
  description: String
}


type User {
  _id: ID!
  username: String!
  password: String!
  email: String!
  worlds: [World]
  userCreated: String
}


type World {
  _id: ID!
  name: String
  creator: User
  religions: [Religion]
  classes: [Class]
  races: [Race]
  regions: [Region]
  historicalEvents: [History]
  description: String
  wiki: Wiki
}

type Wiki {
  world: World
  categories: [Category]
}

type Auth {
  token: ID!
  user: User
}



"""
Input types
"""

input HistoryInput {
  _id: ID  
  title: String
  body: String
  date: String
}

input MonsterInput {
  _id: ID  
  name: String
  description: String
  size: String
}
input UserInput {
  _id: ID  
  username: String
  password: String
  email: String
  worlds: [WorldInput]
}

input RegionInput {
  _id: ID  
  name: String
  countries: [CountryInput]
  landmarks: [LandmarkInput]
  monsters: [MonsterInput]
}

input LandmarkInput {
  _id: ID  
  name: String
  description: String
}
input GodInput {
  _id: ID  
  name: String
  description: String
  domains: [String]
  symbol: String
  alignment: String
}
input ReligionInput {
  _id: ID  
  name: String
  gods: [GodInput]
}

input GovernmentInput {
  _id: ID  
  members: [CharacterInput]
  style: String
}

input CountryInput {
  _id: ID  
  name: String
  description: String
  government: GovernmentInput
  cities: [CityInput]
  religions: [ReligionInput]
}

input CityInput {
  _id: ID  
  name: String
  description: String
}

input CharacterInput {
  _id: ID  
  name: String
  description: String
  size: String
  race: RaceInput
  class: ClassInput
  backstory: String
  bonds: [String]
  goals: [String]
  fears: [String]
}

input ClassInput {
  _id: ID  
  name: String
  description: String
}

input RaceInput {
  _id: ID
  name: String
  description: String
}

input WorldInput {
  _id: ID
  name: String
  creator: ID
  regions: [RegionInput]
  religions: [ReligionInput]
  description: String
  historicalEvents: [HistoryInput]
}

type Query {
  getSingleSubject(_id: ID, modelName: String): ArticleSubject 
  getAllOfOneSubject(modelName: String): [ArticleSubject]
  getMe(_id: ID): User
  getWorld(_id: ID): World
  getCharacter(_id: ID): Character
}

type Mutation {
  createUser(username: String!, password: String!, email: String!): Auth
  updateToken(userId: ID!): Auth
  login(email: String!, password: String!): Auth

  createWorld(world: WorldInput): World
  updateWorld(world: WorldInput): World
  deleteWorld(worldId: ID): World

  createCharacter(character: CharacterInput, worldId: ID): Character
  updateCharacter(character: CharacterInput, worldId: ID): Character
  deleteCharacter(characterId: ID, worldId: ID): Character

  createReligion(religion: ReligionInput, worldId: ID): Religion
  updateReligion(religion: ReligionInput, worldId: ID): Religion
  deleteReligion(religionId: ID, worldId: ID): Religion

  createGod(god: GodInput, worldId: ID, religionId: ID): God
  updateGod(god: GodInput, worldId: ID, religionId: ID): God
  deleteGod(godId: ID, worldId: ID): God

  createRegion(region: RegionInput, worldId: ID): Region
  updateRegion(region: RegionInput, worldId: ID): Region
  deleteRegion(regionId: ID, worldId: ID): Region

  createMonster(monster: MonsterInput, worldId: ID, regionId: ID): Monster
  updateMonster(monster: MonsterInput, worldId: ID, regionId: ID): Monster
  deleteMonster(monsterId: ID, worldId: ID): Monster
}
